{"version":3,"sources":["views/NormalStore/Code.js","views/NormalStore/NormalStore.js","views/ReduxStore/Code.js","views/ReduxStore/ReduxStore.js","views/XstateStore/Code.js","views/XstateStore/XstateStore.js","App.js","reportWebVitals.js","index.js"],"names":["Code","language","style","docco","useCountStore","createStore","devtools","persist","set","get","count","increment","store","decrement","name","Increment","memo","onClick","Decrement","Count","state","NormalStore","useCountStoreRedux","redux","action","type","api","dispatch","decrementAction","ReduxStore","useToggleMachineStore","xstate","Machine","id","initial","states","active","on","TOGGLE","target","actions","inactive","incrementCount","context","times","Light","Toggle","sendEvent","toggle","XstateStore","App","className","display","justifyContent","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.ee6e3d2d.chunk.js","sourcesContent":["import SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst codeString =\n  'const useCountStore = createStore(\\n' +\n  '  devtools(\\n' +\n  '    persist(\\n' +\n  '    (set, get) => ({\\n' +\n  '      count: 0,\\n' +\n  '      increment: () =>\\n' +\n  '        set((store) => ({ ...store, count: store.count + 1 }), \\'increment\\'),\\n' +\n  '      decrement: () =>\\n' +\n  '        set((store) => ({ ...store, count: store.count - 1 }), \\'decrement\\'),\\n' +\n  '    }),\\n' +\n  '      {name:\\'normal-store\\'}\\n' +\n  '  ), \\'counter\\')\\n' +\n  ');\\n' +\n  '\\n' +\n  'const Increment = memo(() => {\\n' +\n  '  const { increment } = useCountStore();\\n' +\n  '  return <button onClick={increment}>increment</button>;\\n' +\n  '});\\n' +\n  '\\n' +\n  'const Decrement = memo(() => {\\n' +\n  '  const { decrement } = useCountStore();\\n' +\n  '  return <button onClick={decrement}>decrement</button>;\\n' +\n  '});\\n' +\n  '\\n' +\n  'const Count = memo(() => {\\n' +\n  '  const count = useCountStore((state) => state.count * 2);\\n' +\n  '  return <h1>{count}</h1>;\\n' +\n  '});\\n' +\n  '\\n' +\n  'export const NormalStore = () => (\\n' +\n  '  <Fragment>\\n' +\n  '    <Count/>\\n' +\n  '    <Increment/>\\n' +\n  '    <Decrement/>\\n' +\n  '  </Fragment>\\n' +\n  ')'\n\nexport const Code = () => (\n  <SyntaxHighlighter language=\"javascript\" style={docco}>\n    {codeString}\n  </SyntaxHighlighter>\n)","import { Fragment, memo } from \"react\";\nimport { createStore, devtools, persist } from \"jasl\";\nimport { Code } from \"./Code\";\n\nconst useCountStore = createStore(\n  devtools(\n    persist(\n      (set, get) => ({\n        count: 0,\n        increment: () =>\n          set((store) => ({ ...store, count: store.count + 1 }), \"increment\"),\n        decrement: () =>\n          set((store) => ({ ...store, count: store.count - 1 }), \"decrement\"),\n      }),\n      { name: \"normal-store\" }\n    ),\n    \"counter\"\n  )\n);\n\nconst Increment = memo(() => {\n  const { increment } = useCountStore();\n  return <button onClick={increment}>increment</button>;\n});\n\nconst Decrement = memo(() => {\n  const { decrement } = useCountStore();\n  return <button onClick={decrement}>decrement</button>;\n});\n\nconst Count = memo(() => {\n  const count = useCountStore((state) => state.count * 2);\n  return <h1>{count}</h1>;\n});\n\nexport const NormalStore = () => (\n  <Fragment>\n    <Count />\n    <Increment />\n    <Decrement />\n    <Code />\n  </Fragment>\n);\n","import SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst codeString =\n  'const reducer = (state, action) => {\\n' +\n  '  switch (action.type) {\\n' +\n  '    case \\'increment\\':\\n' +\n  '      return { ...state, count: state.count + 1 };\\n' +\n  '    case \\'decrement\\':\\n' +\n  '      return { ...state, count: state.count - 1 };\\n' +\n  '    default:\\n' +\n  '      return state;\\n' +\n  '  }\\n' +\n  '};\\n' +\n  '\\n' +\n  'const useCountStoreRedux = createStore(\\n' +\n  '  devtools(\\n' +\n  '    persist(\\n' +\n  '      redux(reducer, (set, get, api) => ({\\n' +\n  '        count: 0,\\n' +\n  '        increment: () => api.dispatch({ type: \\'increment\\' }),\\n' +\n  '        decrementAction: { type: \\'decrement\\' },\\n' +\n  '      })),\\n' +\n  '      { name: \\'count-redux\\' }\\n' +\n  '    ),\\n' +\n  '    \\'counterRedux\\'\\n' +\n  '  )\\n' +\n  ');\\n' +\n  '\\n' +\n  'const Increment = memo(() => {\\n' +\n  '  const { increment } = useCountStoreRedux();\\n' +\n  '  return <button onClick={increment}>increment</button>;\\n' +\n  '});\\n' +\n  '\\n' +\n  'const Decrement = memo(() => {\\n' +\n  '  const { decrementAction, dispatch } = useCountStoreRedux();\\n' +\n  '  return <button onClick={() => dispatch(decrementAction)}>decrement</button>;\\n' +\n  '});\\n' +\n  '\\n' +\n  'const Count = memo(() => {\\n' +\n  '  const count = useCountStoreRedux((state) => {\\n' +\n  '    return state.count * 2;\\n' +\n  '  });\\n' +\n  '  return <h1>{count}</h1>;\\n' +\n  '});\\n' +\n  '\\n' +\n  'export const ReduxStore = () => (\\n' +\n  '  <Fragment>\\n' +\n  '    <Count/>\\n' +\n  '    <Increment/>\\n' +\n  '    <Decrement/>\\n' +\n  '  </Fragment>\\n' +\n  ')'\n\nexport const Code = () => (\n  <SyntaxHighlighter language=\"javascript\" style={docco}>\n    {codeString}\n  </SyntaxHighlighter>\n)","import { Fragment, memo } from \"react\";\nimport { Code } from \"./Code\";\nimport { createStore, devtools, redux, persist } from \"jasl\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return { ...state, count: state.count + 1 };\n    case \"decrement\":\n      return { ...state, count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n\nconst useCountStoreRedux = createStore(\n  devtools(\n    persist(\n      redux(reducer, (set, get, api) => ({\n        count: 0,\n        increment: () => api.dispatch({ type: \"increment\" }),\n        decrementAction: { type: \"decrement\" },\n      })),\n      { name: \"count-redux\" }\n    ),\n    \"counterRedux\"\n  )\n);\n\nconst Increment = memo(() => {\n  const { increment } = useCountStoreRedux();\n  return <button onClick={increment}>increment</button>;\n});\n\nconst Decrement = memo(() => {\n  const { decrementAction, dispatch } = useCountStoreRedux();\n  return <button onClick={() => dispatch(decrementAction)}>decrement</button>;\n});\n\nconst Count = memo(() => {\n  const count = useCountStoreRedux((state) => {\n    return state.count * 2;\n  });\n  return <h1>{count}</h1>;\n});\n\nexport const ReduxStore = () => (\n  <Fragment>\n    <Count />\n    <Increment />\n    <Decrement />\n    <Code />\n  </Fragment>\n);\n","import SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst codeString =\n  'const useToggleMachineStore = createStore(\\n' +\n  '  devtools(\\n' +\n  '    persist(\\n' +\n  '      xstate(\\n' +\n  '        (set, get, api) =>\\n' +\n  '          Machine(\\n' +\n  '            {\\n' +\n  '              id: \\'toggle\\',\\n' +\n  '              initial: \\'active\\',\\n' +\n  '              states: {\\n' +\n  '                active: {\\n' +\n  '                  on: {\\n' +\n  '                    TOGGLE: { target: \\'inactive\\', actions: \\'incrementCount\\' },\\n' +\n  '                  },\\n' +\n  '                },\\n' +\n  '                inactive: {\\n' +\n  '                  on: {\\n' +\n  '                    TOGGLE: { target: \\'active\\', actions: \\'incrementCount\\' },\\n' +\n  '                  },\\n' +\n  '                },\\n' +\n  '              },\\n' +\n  '            },\\n' +\n  '            {\\n' +\n  '              actions: {\\n' +\n  '                incrementCount() {\\n' +\n  '                  set(\\n' +\n  '                    (context) => ({ ...context, times: context.times + 1 }),\\n' +\n  '                    \\'incrementCount\\'\\n' +\n  '                  );\\n' +\n  '                },\\n' +\n  '              },\\n' +\n  '            }\\n' +\n  '          ),\\n' +\n  '        { times: 0 }\\n' +\n  '      ),\\n' +\n  '      { name: \\'xstate-counter\\' }\\n' +\n  '    ),\\n' +\n  '    \\'toggle\\'\\n' +\n  '  )\\n' +\n  ');\\n' +\n  '\\n' +\n  'const Light = memo(() => {\\n' +\n  '  const { state, context } = useToggleMachineStore();\\n' +\n  '\\n' +\n  '  return (\\n' +\n  '    <Fragment>\\n' +\n  '      <h1>\\n' +\n  '        the light is:\\n' +\n  '        <br />\\n' +\n  '        {state === \\'active\\' ? \\'open\\' : \\'close\\'}\\n' +\n  '      </h1>\\n' +\n  '      <div>toggle count: {context.times}</div>\\n' +\n  '    </Fragment>\\n' +\n  '  );\\n' +\n  '});\\n' +\n  '\\n' +\n  'const Toggle = memo(() => {\\n' +\n  '  const { sendEvent } = useToggleMachineStore();\\n' +\n  '  return <button onClick={() => sendEvent.toggle()}>toggle</button>;\\n' +\n  '});\\n' +\n  '\\n' +\n  'export const XstateStore = () => (\\n' +\n  '  <Fragment>\\n' +\n  '    <Light />\\n' +\n  '    <Toggle />\\n' +\n  '  </Fragment>\\n' +\n  ')'\n\nexport const Code = () => (\n  <SyntaxHighlighter language=\"javascript\" style={docco}>\n    {codeString}\n  </SyntaxHighlighter>\n)","import { Fragment, memo } from \"react\";\nimport { Machine } from \"xstate\";\nimport { Code } from \"./Code\";\nimport { createStore, devtools, xstate, persist } from \"jasl\";\n\nconst useToggleMachineStore = createStore(\n  devtools(\n    persist(\n      xstate(\n        (set, get, api) =>\n          Machine(\n            {\n              id: \"toggle\",\n              initial: \"active\",\n              states: {\n                active: {\n                  on: {\n                    TOGGLE: { target: \"inactive\", actions: \"incrementCount\" },\n                  },\n                },\n                inactive: {\n                  on: {\n                    TOGGLE: { target: \"active\", actions: \"incrementCount\" },\n                  },\n                },\n              },\n            },\n            {\n              actions: {\n                incrementCount() {\n                  set(\n                    (context) => ({ ...context, times: context.times + 1 }),\n                    \"incrementCount\"\n                  );\n                },\n              },\n            }\n          ),\n        { times: 0 }\n      ),\n      { name: \"xstate-counter\" }\n    ),\n    \"toggle\"\n  )\n);\n\nconst Light = memo(() => {\n  const { state, context } = useToggleMachineStore();\n\n  return (\n    <Fragment>\n      <h1>\n        the light is:\n        <br />\n        {state === \"active\" ? \"open\" : \"close\"}\n      </h1>\n      <div>toggle count: {context.times}</div>\n    </Fragment>\n  );\n});\n\nconst Toggle = memo(() => {\n  const { sendEvent } = useToggleMachineStore();\n  return <button onClick={() => sendEvent.toggle()}>toggle</button>;\n});\n\nexport const XstateStore = () => (\n  <Fragment>\n    <Light />\n    <Toggle />\n    <Code />\n  </Fragment>\n);\n","import {Link, Switch, Route} from 'react-router-dom'\nimport {NormalStore} from \"./views/NormalStore/NormalStore\";\nimport {ReduxStore} from \"./views/ReduxStore/ReduxStore\";\nimport {XstateStore} from \"./views/XstateStore/XstateStore\";\n// import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <ul style={{ display: 'flex', justifyContent: 'space-around' }}>\n          <li>\n            <Link to=\"/normal-store\">normal store</Link>\n          </li>\n          <li>\n            <Link to=\"/redux-store\">Redux store</Link>\n          </li>\n          <li>\n            <Link to=\"/xstate-store\">xstate store</Link>\n          </li>\n        </ul>\n      </nav>\n      <Switch>\n        <Route path=\"/normal-store\">\n          <NormalStore/>\n        </Route>\n        <Route path=\"/redux-store\">\n          <ReduxStore/>\n        </Route>\n        <Route path=\"/xstate-store\">\n          <XstateStore/>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}